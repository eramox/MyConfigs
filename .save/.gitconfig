[include]
	path = .gitconfig.local ; specify local configuration like user: work/personnal separation

[alias]

### WARNING ####
# The git aliases are parsed from top to bottom, if two have the same name,
# the last is used
# Need a script to test

###########
# Sections
# 1. Checkout
# 2. Commit
# 3. rebase
# 4. am
# 5. push
# 6. branch
# 7. sync
# 8. View
# 9. Pull request
# 10. Misc
#########

############### checkout ########################
## cm : checkout master branch
	cm = checkout master

## b: list all branches
	b = branch -vv

## br: list local branches
	br = !sh -c 'git fetch && git branch -avv --color | less -r' -

## co: for checkout - useful to checkout a branch and keeps its name -> branch switching	
# $1 shall be the name of the branch
	co = !sh -c 'git checkout $1' -

## ch: for checkout head a file
# $1 shall be the name o fthe file
	ch = !sh -c 'git checkout HEAD "$1"' -

## rtco: for checkout from another remote- useful to checkout a remote branch on different repo
# $1 shall be the name of the branch
# $2 shall be the name of the remote repository
	rtco = !sh -c 'git fetch $2 && git pull $2 && git checkout --track $2/$1' -

## tco: for track and checkout - useful to checkout a remote branch, create it localy and keeps its name and track it automatically
# $1 shall be the name of the branch
	tco = !sh -c 'echo "$1" | sed "s#remotes/origin/##" | xargs -I{} git rtco {} origin' -

############# Commit #######################
## st: status
	st = status
## c: commit
	c = commit -s
## fc: file commit
# $1 file to commit
	fc = !sh -c 'git add $1 && git c' -

## cam: commit amend
	cam = commit --amend

## all: all files
	all = add -A

## call: quick commit
	call = !sh -c 'git all && git commit -s' -

## camall: quick amend
	camall = !sh -c 'git all && git commit --amend' -

## q: quick commit
	q = !sh -c 'git all && git commit -s -m "quickCommit"' -

################# rebase #########################
## rb: rebase
# $1 is the number of commit to rebase upon
	rb  = !sh -c 'git rebase -i HEAD~$1' -
## rbc: continue rebase
	rbc = rebase --continue
## rbs: skip rebase
	rbs = rebase --skip
## rba: abort rebase
	rba = rebase --abort

## rbe: edit a file and add it to stagging
# $1 file to edit
	rbe  = !sh -c 'nano $1 && git add $1' -

## useold : to use old revision of the file (left)(up)
# $1 file to use old version
	useold  = !sh -c 'git checkout --ours $1 && git add $1' -

## usenew : to use new revision of the file (right)(down)
# $1 file to use new version
	usenew  = !sh -c 'git checkout --theirs $1 && git add $1' -


############### am #####################################
## amc: continue am
	amc = am --continue
## ams: skip am
	ams = am --skip
## ama: abort am
	ama = am --abort

## d: diff with last commits
# $1 the number of commits to diff with
	d = !sh -c 'git diff HEAD~$1' -

## cp: cherrypick a patch
# $1 the commit to cherry pick
	cp = !sh -c 'git cherry-pick $1' -

## lcp: local cherrypick a patch
# $1 the repo to use identified by its local path
# $2 the commit to cherry pick
	lcp = !sh -c 'git --git-dir="$1"/.git \
			format-patch -k -1 --stdout $2 | \
			git am -3 -k' -

################# push ####################################
## bpush: push the current branch
	bpush = !sh -c '__GIT_BR=$(__git_ps1 "%s") && echo $__GIT_BR' -
# && git push origin $__GIT_BR:$__GIT_BR' -

## pfl: when push fail
	pfl = push --force-with-lease

## pat push current branch to remote and track it
# $1 name of the local branch - to get by ps1
	pat = !sh -c 'git push origin $1:$1' -

## pex : push execept the last one
# $1 the name of the branch to push
	pex = !sh -c 'git push origin HEAD~1:$1' -

## npex : push branch except N last
# $1 
	npex =  !sh -c 'push origin HEAD~$1' -

## psha  push a branch until a specific SHA - usefull to push a branch up to a specific version
# $1 
# $2 extr opt
	psha = !sh -c 'BR_NAME=`git bname` && echo "pushing revision $1 to $BR_NAME" && git push origin $1:$BR_NAME -f' -

########################## branch ###################################

## bnew
# $1 the name of the branch
	bnew = !sh -c 'echo "Creating branch $1" && git cm && git branch $1 && git co $1 && git align $1' -
## brem
# $1 the name of the branch to delete locally
	brem = !sh -c 'git cm && git branch -d $1' -
## bkill
# $1 the name of the branch to delete locally and on remote
	bkill = !sh -c 'git fetch && git cm && git push origin --delete $1 && git branch -D $1 && git fetch -p' -

## bwip : create a branch to work on (WIP) and a branch for PR
# $1 name of the branch
	bwip = !sh -c 'export WIP_BR=\"$1_WIP\" && export PR_BR=\"$1_PR\" && git bnew $WIP_BR && git bnew $PR_BR && git co $WIP_BR && echo \"\n\nBranches created: \n\t- WIP: $WIP_BR\n\t- PR: $PR_BR\"' -

## brename
# $1 the old name of the branch
# $2 the new name of the branch
	brename = !sh -c 'git branch -m $1 $2 && git push origin --set-upstream $2  && git bkill $1' -
## remdel remove all deleted file
	remdel = !sh -c 'git st | grep "deleted:" | awk '{print $2}' | xargs git rm' -

## align  push new branch
# $1 the branch to push from upstream
	align = !sh -c 'git push --set-upstream origin $1' -

################## sync ##########################################

## sync  fetch and rebase brnach on master
	sync = !sh -c 'BR_NAME=`git bname` && git cm && git fetch -p --all && git pull && git co $BR_NAME && git rebase master' -
## dsync  sync deleted branches

## bsync  fetch and rebase brnach on custom branch
	bsync = !sh -c 'git fetch origin $1 && git rebase origin/$1' -
## rsync  fetch and rebase brnach on master
	rsync = !sh -c 'git fetch $1 master && git rebase $1/master' -
## rbsync  fetch and rebase brnach on custom branch
	rbsync = !sh -c 'git fetch $1 $2 && git rebase $1/$2' -

## track change the tracking of a branch
# $1 the branch to change tracking
# $2 the branch to track from upstream
	track = !sh -c 'git branch --track $1 $2' -	

## force  push new branch
# $@ the branch to push
	force = !sh -c 'git "$@" -f' -


################## View #######################################

## file : show last commit detail
	file = !sh -c 'git show --stat --oneline HEAD' -

## nlog show latest logs
# $1 option for log
	nlog = !sh -c 'git log -n 5 --oneline $1' -

## k : run gitk
	k = !sh -c 'gitk' -

## nk : run gitk on $1 last commit
# $1 the number of commits to view
	nk = !sh -c 'gitk -n 5' -

## gitkall: View all git branches
	kall = ! sh -c 'sh ~/gitkall.sh ' - ; not working properly, need to put it in a script file, but usefull

## dimeld: diff between branches in meld !!1 git difftool -g -d master..update
# $1 the left version 
# $2 the right version
	dimeld = !sh -c 'git difftool -g -d $1..$2' -



################# PR #########################################
## testpr test a Pull Request
# $1 the PR number
	testpr = !sh -c 'PRbranch=\"PRtest/$1\" && git sync && git fetch origin refs/pull-requests/$1/from:$PRbranch && git co $PRbranch' -

## testghpr test a Pull Request from github
# $1 the PR number
	testghpr = !sh -c 'PRbranch=\"GHPRtest/$1\" && git sync && git fetch origin refs/pull/$1/head:$PRbranch && git co $PRbranch' -

################# Misc ###################


## gitreset: Reset the branch to remote state
	gitreset = !sh -c 'git cm && git fetch origin && git reset --hard origin/master' -

## mreset
	mreset = !sh -c 'git reset --hard origin/master' -

## bname get the name of the branch
	bname = rev-parse --abbrev-ref HEAD

## printbname
	printbname = !sh -c 'BR_NAME=`git bname` && echo \"The name of the branch is: [$BR_NAME]\"' -

## jana
# $1 The number of commits to send to janna
	jana = !sh -c 'git send-email -$1 --cover-letter --annotate --to jana.build@nxp.com' -

############ End custom alias ######################
[push]
        default = current
[color]
        ui = auto
[diff]
        tool = meld
        guitool = meld
        algorithm = patience
[merge]
        tool = meld
        guitool = meld
[difftool]
        prompt = false
[branch]
        autosetupmerge = always

# Tips
# make orphan branch:
#	git checkout --orphan <new_branch>
#	rm -Rf .
#	git push

# make empty commit
# git commit --allow-empty -m "Trigger notification"

# multiple byobu
# new session: tmux new -s <myname>
# see sessions: byobu ls 
# connect session: byobu

# Search trailing spaces
# [ \t]+$

# get name of the branch
# git rev-parse --abbrev-ref HEAD

[core]
	autocrlf = input
	excludesfile = /home/nxf07296/.gitignore_global
[http]
	sslverify = false

# Email conf for Janna
[sendemail]
	smtpserver = remotesmtp.freescale.net
